// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  company   String?
  logo      String?
  address   String?
  city      String?
  state     String?
  zipCode   String?
  country   String?
  phone     String?
  website   String?
  taxId     String?
  currency  String   @default("USD")
  timezone  String   @default("UTC")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  clients   Client[]
  invoices  Invoice[]
  templates Template[]

  @@map("users")
}

model Client {
  id        String   @id @default(cuid())
  email     String
  firstName String
  lastName  String
  company   String?
  address   String?
  city      String?
  state     String?
  zipCode   String?
  country   String?
  phone     String?
  website   String?
  taxId     String?
  notes     String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  invoices  Invoice[]

  @@map("clients")
}

model Invoice {
  id          String   @id @default(cuid())
  invoiceNumber String @unique
  status      InvoiceStatus @default(DRAFT)
  issueDate   DateTime
  dueDate     DateTime
  subtotal    Float
  taxRate     Float    @default(0)
  taxAmount   Float    @default(0)
  discount    Float    @default(0)
  total       Float
  currency    String   @default("USD")
  notes       String?
  terms       String?
  isPaid      Boolean  @default(false)
  paidAt      DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  clientId   String
  client     Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  templateId String?
  template   Template? @relation(fields: [templateId], references: [id])
  items      InvoiceItem[]
  payments   Payment[]

  @@map("invoices")
}

model InvoiceItem {
  id          String   @id @default(cuid())
  description String
  quantity    Float
  unitPrice   Float
  total       Float
  order       Int

  // Relations
  invoiceId   String
  invoice     Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@map("invoice_items")
}

model Template {
  id          String   @id @default(cuid())
  name        String
  description String?
  html        String
  css         String?
  isDefault   Boolean  @default(false)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  invoices    Invoice[]

  @@map("templates")
}

model Payment {
  id          String   @id @default(cuid())
  amount      Float
  method      PaymentMethod
  reference  String?
  notes      String?
  paidAt     DateTime @default(now())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  invoiceId   String
  invoice     Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@map("payments")
}

enum InvoiceStatus {
  DRAFT
  SENT
  VIEWED
  PAID
  OVERDUE
  CANCELLED
}

enum PaymentMethod {
  CASH
  CHECK
  BANK_TRANSFER
  CREDIT_CARD
  PAYPAL
  STRIPE
  OTHER
}
